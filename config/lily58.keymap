/* -*- mode: c -*-
 *
 * Copyright (c) 2024 antlers <antlers@illucid.net>
 *
 * SPDX-License-Identifier: MIT
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

#define ZMK_TAP_DANCE_STRINGIFY(x) #x
#define ZMK_TAP_DANCE(name, layer) \
    name: name { \
            compatible = "zmk,behavior-tap-dance"; \
            label = ZMK_TAP_DANCE_STRINGIFY(ZM_ ## name); \
            #binding-cells = <0>; \
            tapping-term-ms = <200>; \
            bindings = <&mo layer>, <&to layer>; \
        };

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/ext_power.h>

#define XXX &none
#define ___ &trans

#define BASE 0
#define SYM 1
#define EXT 2
#define FUN 3
#define NUM 4
#define QRT 5

/ {
    macros {
        dbl_l: dbl_l {
          compatible = "zmk,behavior-macro";
          label = "ZM_dbl_l";
          #binding-cells = <0>;
          wait-ms = <30>;
          tap-ms = <40>;
          bindings = <&kp L &kp L>;
        };
    };
    // combos {
    //     compatible = "zmk,combos";
    //     combo_l_mr {
    //         timeout-ms = <50>;
    //         layers = <0>;
    //         key-positions = <22 23>;
    //         bindings = <&dbl_l>;
    //     };
    // };
    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = < ___ &kp N7 &kp N8 &kp N9 &kp N0 &kp N5 &kp N6 &kp N1 &kp N2 &kp N3 &kp N4 XXX &to BASE &kp V &kp M &kp L &kp C &kp P &kp B &key_repeat &kp U &kp O &kp Q XXX &to BASE &kp S &kp T &kp R &kp D &kp Y &kp F &kp N &kp E &kp A &kp I &kp Q XXX &kp X &kp K &kp J &kp G &kp W &caps_word &caps_word &kp Z &kp H &kp COMMA &kp DOT &kp SQT XXX XXX &mo NUM &mo EXT &mo EXT &kp SPC &kp SPC XXX XXX >;
        };

        sym {
            bindings = < ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ LAYER_LOCK ___ ___ ___ ___ ___ &kp CARET &kp RBKT &kp LBKT &kp PERCENT &kp DOLLAR ___ ___ &sk LALT &sk LMETA &sk LSHIFT &sk LCTRL ___ &kp SEMI &kp RPAR &kp LPAR ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ &kp RBRC &kp LBRC ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ >;
        };

        ext {
            bindings = < ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ LAYER_LOCK ___ ___ ___ ___ ___ &kp END ___ &kp PG_DN &kp PG_UP ___ ___ ___ &sk LALT &sk LMETA &sk LSHIFT &sk LCTRL ___ &kp HOME &kp LEFT &kp DOWN &kp UP &kp RIGHT ___ ___ ___ ___ ___ ___ ___ ___ ___ &kp DELETE &kp BKSP &kp RET &kp TAB ___ ___ ___ ___ ___ ___ &kp BKSP &kp BKSP ___ ___ >;
        };

        fun {
            bindings = < ___ &kp F7 &kp F8 &kp F9 &kp F10 &kp F5 &kp F6 &kp F1 &kp F2 &kp F3 &kp F4 ___ LAYER_LOCK ___ ___ &to BASE &to QRT ___ &kp F12 &kp F7 &kp F8 &kp F9 ___ ___ ___ &sk LALT &sk LMETA &sk LSHIFT &sk LCTRL ___ &kp F11 &kp F4 &kp F5 &kp F6 ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ &kp F10 &kp F1 &kp F2 &kp F3 ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ >;
        };

        num {
            bindings = < ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ LAYER_LOCK ___ &to FUN ___ &to FUN ___ ___ &kp N7 &kp N8 &kp N9 ___ ___ ___ &sk LALT &sk LMETA &sk LSHIFT &sk LCTRL ___ &kp N0 &kp N4 &kp N5 &kp N6 &kp N0 ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ &kp N1 &kp N2 &kp N3 ___ ___ ___ ___ ___ ___ &kp N0 &kp N0 ___ ___ >;
        };

        qrt {
            bindings = < ___ &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &to QRT &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BKSP &to QRT &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp SQT ___ &kp Z &kp X &kp C &kp V &kp B ___ ___ &kp N &kp M &kp COMMA &kp DOT &kp SLASH ___ ___ ___ ___ ___ ___ ___ ___ ___ >;
        };

    };
};
